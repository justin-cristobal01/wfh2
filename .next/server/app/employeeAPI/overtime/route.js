(()=>{var e={};e.id=6155,e.ids=[6155],e.modules={96330:e=>{"use strict";e.exports=require("@prisma/client")},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},19253:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>w,routeModule:()=>m,serverHooks:()=>g,workAsyncStorage:()=>v,workUnitAsyncStorage:()=>x});var s={};r.r(s),r.d(s,{DELETE:()=>d,GET:()=>p,PATCH:()=>c,POST:()=>l});var n=r(42706),a=r(28203),o=r(45994),i=r(39187),u=r(84908);async function p(e){try{let{searchParams:t}=new URL(e.url),r=t.get("employeeId"),s=t.get("status"),n=t.get("startDate"),a=t.get("endDate"),o=parseInt(t.get("page")||"1",10),p=parseInt(t.get("pageSize")||"10",10),l=(o-1)*p;if(!r)return i.NextResponse.json({error:"Employee ID is required"},{status:400});let d={employeeId:r,...s&&{status:s},...n&&a&&{AND:[{startDate:{gte:new Date(n)}},{endDate:{lte:new Date(a)}}]}},[c,m]=await u.A.$transaction([u.A.overtime.findMany({where:d,orderBy:{createdAt:"desc"},skip:l,take:p}),u.A.overtime.count({where:d})]),v=Math.ceil(m/p);return i.NextResponse.json({overtimes:c,totalPages:v,totalOvertimes:m,currentPage:o,pageSize:p},{status:200})}catch(e){return console.error("Error fetching overtime requests:",e),i.NextResponse.json({error:"Internal Server Error",details:e.message},{status:500})}}async function l(e){try{let{employeeId:t,startDate:r,endDate:s,reason:n}=await e.json();if(!t||!r||!s||!n)return i.NextResponse.json({error:"All fields are required"},{status:400});let a=new Date(r),o=new Date(s);if((await u.A.overtime.findMany({where:{employeeId:t,status:{not:"REJECTED"},startDate:{lt:o},endDate:{gt:a}}})).length>0)return i.NextResponse.json({error:"❌ Overtime request overlaps with an existing request."},{status:400});let p=await u.A.overtime.create({data:{employeeId:t,startDate:a,endDate:o,reason:n,status:"PENDING"}});return i.NextResponse.json({message:"Overtime request submitted",overtime:p},{status:201})}catch(e){return console.error("Error creating overtime request:",e),i.NextResponse.json({error:"Internal Server Error",details:e},{status:500})}}async function d(e){try{let{id:t}=await e.json();if(!t)return i.NextResponse.json({error:"Overtime ID is required"},{status:400});if(!await u.A.overtime.findUnique({where:{id:t}}))return i.NextResponse.json({error:"Overtime request not found"},{status:404});return await u.A.overtime.delete({where:{id:t}}),i.NextResponse.json({message:"Overtime request deleted successfully"},{status:200})}catch(e){return console.error("Error deleting overtime request:",e),i.NextResponse.json({error:"Internal Server Error",details:e},{status:500})}}async function c(e){try{let{id:t,startDate:r,endDate:s,reason:n,status:a}=await e.json();if(!t)return i.NextResponse.json({error:"Overtime ID is required"},{status:400});let o=await u.A.overtime.findUnique({where:{id:t}});if(!o)return i.NextResponse.json({error:"Overtime request not found"},{status:404});let p=r?new Date(r):o.startDate,l=s?new Date(s):o.endDate;if((await u.A.overtime.findMany({where:{employeeId:o.employeeId,id:{not:t},status:{not:"REJECTED"},startDate:{lt:l},endDate:{gt:p}}})).length>0)return i.NextResponse.json({error:"❌ Overtime request overlaps with an existing request."},{status:400});let d=await u.A.overtime.update({where:{id:t},data:{startDate:p,endDate:l,reason:n||o.reason,status:a??o.status}});return i.NextResponse.json({message:"Overtime request updated successfully",overtime:d},{status:200})}catch(e){return console.error("Error updating overtime request:",e),i.NextResponse.json({error:"Internal Server Error",details:e},{status:500})}}let m=new n.AppRouteRouteModule({definition:{kind:a.RouteKind.APP_ROUTE,page:"/employeeAPI/overtime/route",pathname:"/employeeAPI/overtime",filename:"route",bundlePath:"app/employeeAPI/overtime/route"},resolvedPagePath:"C:\\Users\\justin\\Desktop\\vercel\\WFH-Monitoring\\src\\app\\employeeAPI\\overtime\\route.tsx",nextConfigOutput:"",userland:s}),{workAsyncStorage:v,workUnitAsyncStorage:x,serverHooks:g}=m;function w(){return(0,o.patchFetch)({workAsyncStorage:v,workUnitAsyncStorage:x})}},18868:()=>{},78335:()=>{},84908:(e,t,r)=>{"use strict";r.d(t,{A:()=>n});var s=r(96330);let n=global.prisma??new s.PrismaClient}};var t=require("../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[638,5452],()=>r(19253));module.exports=s})();